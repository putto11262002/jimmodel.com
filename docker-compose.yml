version: "3.5"

services:
  reverse-proxy:
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.postgres.address=:5432/tcp"
    ports:
      - "80:80"
      - "8080:8080"
      - "5432:5432"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  postgres:
    image: postgres:16-alpine
    container_name: jimmodel_postgres
    restart: always
    volumes:
      - ${DB_DATA:-postgres_data}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.jimmodel-db.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.jimmodel-db.entrypoints=postgres"
      - "traefik.tcp.services.jimmodel-db.loadbalancer.server.port=5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio
    container_name: jimmodel_minio
    restart: always
    volumes:
      - ${MINIO_DATA:-minio_data}:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      retries: 1
      start_period: 5s
      timeout: 5s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jimmodel-minio.rule=Host(`${S3_DOMAIN:-minio.jimmodel.com}`)"
      - "traefik.http.routers.jimmodel-minio.entrypoints=web"
      - "traefik.http.services.jimmodel-minio.loadbalancer.server.port=9001"
  minio-mc:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./scripts/minio-entrypoint.sh:/scripts/entrypoint.sh
    entrypoint: /scripts/entrypoint.sh
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      ACCESS_KEY: ${S3_ACCESS_KEY}
      SECRET_KEY: ${S3_SECRET_KEY}
      BUCKET_NAME: ${S3_BUCKET_NAME}
    labels:
      - "traefik.enable=false"
  app:
    # build:
    #   context: .
    #   args:
    #     - NODE_ENV=production
    #   target: runner
    image: putto2002/jimmodel_app:latest
    container_name: jimmodel_app
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ${FILE_STORAGE_PATH:-postgres_data}:/app/file_storage
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: postgres
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_TRUST_HOST: true
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PORT: ${S3_PORT}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jimmodel-app.rule=Host(`${APP_DOMAIN:-web.jimmodel.com}`)"
      - "traefik.http.routers.jimmodel-app.entrypoints=web"
      - "traefik.http.services.jimmodel-app.loadbalancer.server.port=3000"
  app-initializer:
    # build:
    #   context: .
    #   args:
    #     - NODE_ENV=production
    #   target: initializer-runner
    image: putto2002/jimmodel_initializer:latest
    container_name: jimmodel_app_initializer
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: postgres
      ROOT_USER: ${ROOT_USER:-root}
      ROOT_PASSWORD: ${ROOT_PASSWORD:-password}
volumes:
  postgres_data:
  minio_data:
